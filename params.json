{
  "name": "Scalagen",
  "tagline": "A library for generating row based test data",
  "body": "## Scala Gen\r\n\r\n[ ![Download](https://api.bintray.com/packages/hntd187/maven/scalagen/images/download.svg) ](https://bintray.com/hntd187/maven/scalagen/_latestVersion)\r\n\r\nScala gen is a simple library based around being able to generate row based\r\ntest data and easily compose a description of that data set. It also currently\r\nincludes the ability to write this data to both Csv and Parquet files.\r\n\r\n### Add the dependency to your project\r\n```\r\n\"com.scalagen\" %% \"scalagen\" % \"0.0.2\" % Test\r\n```\r\n\r\nYou then can compose a simple data set like so\r\n```scala\r\nimport com.scalagen.data._\r\nval data = IncrementingSource() | YesNoSource()\r\ndata.getLine\r\n```\r\n\r\n### Available Sources\r\n* GaussianSource (Numbers drawn from a normal distribution)\r\n* BernoulliSource (Booleans drawn from a Bernoulli Trial)\r\n* GenderSource (M or F based on a Bernoulli Trial)\r\n* YesNoSource (Y or N based on a Bernoulli Trial)\r\n* DateSource (Incrementing Dates)\r\n* IncrementingSource (Incrementing integers, like a primary key)\r\n* RandomSource (Random values drawn from a provided set of values)\r\n\r\n### Available Writers\r\n* Simple CSV\r\n* Simple Parquet\r\n\r\n### Example of a Writer\r\n```scala\r\nimport com.scalagen.data._\r\nval data = Csv {\r\n  IncrementingSource() | YesNoSource() | GaussianSource()\r\n}\r\ndata.write(\"data.csv\", 10)\r\ndata.show()\r\n```\r\n\r\nProduces the following\r\n```\r\n╒════════════════════════════════╤════════════════════════════════╤════════════════════════════════╕\r\n│               Id               │            Response            │             Score              │\r\n╞════════════════════════════════╪════════════════════════════════╪════════════════════════════════╡\r\n│               1                │               No               │              4.7               │\r\n│               2                │              Yes               │              0.85              │\r\n│               3                │               No               │             -0.55              │\r\n│               4                │              Yes               │              0.37              │\r\n│               5                │              Yes               │              1.0               │\r\n│               6                │               No               │              2.3               │\r\n│               7                │               No               │              4.0               │\r\n│               8                │              Yes               │              1.4               │\r\n│               9                │              Yes               │              1.1               │\r\n│               10               │              Yes               │              0.92              │\r\n╘════════════════════════════════╧════════════════════════════════╧════════════════════════════════╛\r\n```\r\n\r\nYou can also alter the format of Doubles and Dates by providing implicit values for those... \r\n```scala\r\nimport com.scalagen.data._\r\nimplicit val mc = MathContext.DECIMAL32\r\nimplicit val df = DateTimeFormatter.BASIC_ISO_DATE\r\nval data = Csv {\r\n  IncrementingSource() | DateSource(LocalDate.now()) | GaussianSource()\r\n}.withHeaders(\"Id\", \"Date\", \"Score\")\r\ndata.show()\r\n```\r\n\r\nWhich produces...\r\n```\r\n╒════════════════════════════════╤════════════════════════════════╤════════════════════════════════╕\r\n│               Id               │              Date              │             Score              │\r\n╞════════════════════════════════╪════════════════════════════════╪════════════════════════════════╡\r\n│               1                │            20161012            │            2.102348            │\r\n│               2                │            20161019            │            1.360111            │\r\n│               3                │            20161026            │            2.734621            │\r\n│               4                │            20161102            │            1.824946            │\r\n│               5                │            20161109            │           0.9169786            │\r\n│               6                │            20161116            │            2.418038            │\r\n│               7                │            20161123            │            2.647185            │\r\n│               8                │            20161130            │            2.361134            │\r\n│               9                │            20161207            │            2.786133            │\r\n│               10               │            20161214            │            3.19905             │\r\n╘════════════════════════════════╧════════════════════════════════╧════════════════════════════════╛\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}